SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Sep-2020 20:54:48  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\ludor\Documents\CASIO\fx-9860G SDK\Exodus\Keys.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Keys.c     1    #define __KEYBIOS_H__
          Keys.c     2    #include "fxlib.h"
          Keys.c     3    // #define KEY_CHAR_0 71
          Keys.c     4    // #define KEY_CHAR_1 72
          Keys.c     5    // #define KEY_CHAR_2 62
          Keys.c     6    // #define KEY_CHAR_3 52
          Keys.c     7    // #define KEY_CHAR_4 73
          Keys.c     8    // #define KEY_CHAR_5 63
          Keys.c     9    // #define KEY_CHAR_6 53
          Keys.c    10    // #define KEY_CHAR_7 74
          Keys.c    11    // #define KEY_CHAR_8 64
          Keys.c    12    // #define KEY_CHAR_9 54
          Keys.c    13    // #define KEY_CHAR_DP 61
          Keys.c    14    // #define KEY_CHAR_EXP 51
          Keys.c    15    // #define KEY_CHAR_PMINUS 41
          Keys.c    16    // #define KEY_CHAR_PLUS 42
          Keys.c    17    // #define KEY_CHAR_MINUS 32
          Keys.c    18    // #define KEY_CHAR_MULT 43
          Keys.c    19    // #define KEY_CHAR_DIV 33
          Keys.c    20    // #define KEY_CHAR_FRAC 75
          Keys.c    21    // #define KEY_CHAR_LPAR 55
          Keys.c    22    // #define KEY_CHAR_RPAR 45
          Keys.c    23    // #define KEY_CHAR_COMMA 35
          Keys.c    24    // #define KEY_CHAR_STORE 25
          Keys.c    25    // #define KEY_CHAR_LOG 66
          Keys.c    26    // #define KEY_CHAR_LN 56
          Keys.c    27    // #define KEY_CHAR_SIN 46
          Keys.c    28    // #define KEY_CHAR_COS 36
          Keys.c    29    // #define KEY_CHAR_TAN 26
          Keys.c    30    // #define KEY_CHAR_SQUARE 67
          Keys.c    31    // #define KEY_CHAR_POW 57
          Keys.c    32    // #define KEY_CTRL_EXE 31
          Keys.c    33    // #define KEY_CTRL_DEL 44
          Keys.c    34    // #define KEY_CTRL_AC 32
          Keys.c    35    // #define KEY_CTRL_FD 65
          Keys.c    36    // #define KEY_CTRL_EXIT 47
          Keys.c    37    // #define KEY_CTRL_SHIFT 78
          Keys.c    38    // #define KEY_CTRL_ALPHA 77
          Keys.c    39    // #define KEY_CTRL_OPTN 68
          Keys.c    40    // #define KEY_CTRL_VARS 58
          Keys.c    41    // #define KEY_CTRL_UP 28
          Keys.c    42    // #define KEY_CTRL_DOWN 37
          Keys.c    43    // #define KEY_CTRL_LEFT 38
          Keys.c    44    // #define KEY_CTRL_RIGHT 27
          Keys.c    45    // #define KEY_CTRL_F1 79
          Keys.c    46    // #define KEY_CTRL_F2 69
          Keys.c    47    // #define KEY_CTRL_F3 59
          Keys.c    48    // #define KEY_CTRL_F4 49
          Keys.c    49    // #define KEY_CTRL_F5 39
          Keys.c    50    // #define KEY_CTRL_F6 29
          Keys.c    51    // #define KEY_CTRL_MENU 48
          Keys.c    52    #ifndef OS2Change
          Keys.c    53    #define OS2Change
          Keys.c    54    #ifndef OS2Change_GetOS2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Sep-2020 20:54:48  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Keys.c    55    #define OS2Change_GetOS2
          Keys.c    56    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
          Keys.c    57    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
          Keys.c    58    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
          Keys.c    59    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
          Keys.c    60    {
          Keys.c    61       unsigned char mainversion;
          Keys.c    62       unsigned char minorversion;
          Keys.c    63       unsigned short release;
          Keys.c    64       unsigned short build;
          Keys.c    65       GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D346                   MOV.L       L356+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
          Keys.c    66       return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0
                         +x0000FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D342                   MOV.L       L356+10,R3 ; H'FF000000
    0000001A 600C                   EXTU.B      R0,R0
    0000001C D242                   MOV.L       L356+14,R2 ; H'00FF0000
    0000001E 4028                   SHLL16      R0
    00000020 4018                   SHLL8       R0
    00000022 2039                   AND         R3,R0
    00000024 6103                   MOV         R0,R1
    00000026 84F4                   MOV.B       @(4,R15),R0
    00000028 600C                   EXTU.B      R0,R0
    0000002A 4028                   SHLL16      R0
    0000002C 2029                   AND         R2,R0
    0000002E 201B                   OR          R1,R0
    00000030 6103                   MOV         R0,R1
    00000032 85F4                   MOV.W       @(8,R15),R0
    00000034 600D                   EXTU.W      R0,R0
          Keys.c    67    }
    00000036 7F10                   ADD         #16,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS
    0000003C 201B                   OR          R1,R0
          Keys.c    68    #define isOS2 (OSVersionAsInt() >= 0x02020000)
          Keys.c    69    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
          Keys.c    70    #endif
          Keys.c    71    #ifndef OS2Change_Keyboard
          Keys.c    72    #define OS2Change_Keyboard
          Keys.c    73    void delay(void)
    0000003E              _delay:                          ; function: delay
                                                           ; frame size=0
          Keys.c    74    {
          Keys.c    75       char i;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Sep-2020 20:54:48  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Keys.c    76       for (i=0; i<5; i++){};
    0000003E E505                   MOV         #5,R5
    00000040 E400                   MOV         #0,R4
    00000042              L340:                             
    00000042 7401                   ADD         #1,R4
    00000044 634E                   EXTS.B      R4,R3
    00000046 3353                   CMP/GE      R5,R3
    00000048 8BFB                   BF          L340
          Keys.c    77    }
    0000004A 000B                   RTS
    0000004C 0009                   NOP
          Keys.c    78    unsigned char CheckKeyRow(unsigned char code)
    0000004E              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
          Keys.c    79    {
          Keys.c    80       unsigned char result=0;
          Keys.c    81       short*PORTB_CTRL=(void*)0xA4000102;
          Keys.c    82       short*PORTM_CTRL=(void*)0xA4000118;
          Keys.c    83       char*PORTB=(void*)0xA4000122;
          Keys.c    84       char*PORTM=(void*)0xA4000138;
          Keys.c    85       char*PORTA=(void*)0xA4000120;
          Keys.c    86       short smask;
          Keys.c    87       char cmask;
          Keys.c    88       unsigned char column, row;
          Keys.c    89       column = code>>4;
    0000004E 634C                   EXTU.B      R4,R3
    00000050 2FE6                   MOV.L       R14,@-R15
          Keys.c    90       row = code &0x0F;
    00000052 E50F                   MOV         #15,R5
    00000054 2FD6                   MOV.L       R13,@-R15
    00000056 4309                   SHLR2       R3
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2549                   AND         R4,R5
    0000005C 2FB6                   MOV.L       R11,@-R15
    0000005E 4309                   SHLR2       R3
    00000060 2FA6                   MOV.L       R10,@-R15
          Keys.c    91       smask = 0x0003 << (( row %8)*2);
    00000062 665C                   EXTU.B      R5,R6
    00000064 2F96                   MOV.L       R9,@-R15
    00000066 6063                   MOV         R6,R0
    00000068 4F22                   STS.L       PR,@-R15
    0000006A 4011                   CMP/PZ      R0
    0000006C 7FFC                   ADD         #-4,R15
    0000006E 2F30                   MOV.B       R3,@R15
    00000070 8B01                   BF          L341
    00000072 A005                   BRA         L342
    00000074 C907                   AND         #7,R0
    00000076              L341:                             
    00000076 6007                   NOT         R0,R0
    00000078 7001                   ADD         #1,R0
    0000007A C907                   AND         #7,R0
    0000007C 6007                   NOT         R0,R0
    0000007E 7001                   ADD         #1,R0
    00000080              L342:                             
          Keys.c    92       cmask = ~( 1 << ( row %8) );
          Keys.c    93       if(row <8)
    00000080 994B                   MOV.W       L356,R9    ; H'AAAA




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Sep-2020 20:54:48  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000082 E208                   MOV         #8,R2
    00000084 DB29                   MOV.L       L356+18,R11; H'A4000102
    00000086 6403                   MOV         R0,R4
    00000088 9D48                   MOV.W       L356+2,R13 ; H'FF00
    0000008A E503                   MOV         #3,R5
    0000008C DE28                   MOV.L       L356+22,R14; H'A4000118
    0000008E EA01                   MOV         #1,R10
    00000090 4000                   SHLL        R0
    00000092 450C                   SHAD        R0,R5
    00000094 4A4C                   SHAD        R4,R10
    00000096 6AA7                   NOT         R10,R10
    00000098 6CB3                   MOV         R11,R12
    0000009A 3623                   CMP/GE      R2,R6
    0000009C 8D0D                   BT/S        L343
    0000009E 7C36                   ADD         #54,R12
          Keys.c    94       {
          Keys.c    95          *PORTB_CTRL = 0xAAAA ^ smask;
    000000A0 259A                   XOR         R9,R5
    000000A2 2B51                   MOV.W       R5,@R11
          Keys.c    96          *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A4 60E1                   MOV.W       @R14,R0
    000000A6 20D9                   AND         R13,R0
    000000A8 CBAA                   OR          #170,R0
          Keys.c    97          delay();
    000000AA BFC8                   BSR         _delay
    000000AC 2E01                   MOV.W       R0,@R14
          Keys.c    98          *PORTB = cmask;
    000000AE D221                   MOV.L       L356+26,R2 ; H'A4000122
    000000B0 22A0                   MOV.B       R10,@R2
          Keys.c    99          *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000B2 60C0                   MOV.B       @R12,R0
    000000B4 C9F0                   AND         #240,R0
    000000B6 A00D                   BRA         L355
    000000B8 CB0F                   OR          #15,R0
    000000BA              L343:                             
          Keys.c   100       }
          Keys.c   101       else
          Keys.c   102       {
          Keys.c   103          *PORTB_CTRL = 0xAAAA;
    000000BA 2B91                   MOV.W       R9,@R11
          Keys.c   104          *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000BC 60E1                   MOV.W       @R14,R0
    000000BE 20D9                   AND         R13,R0
    000000C0 CBAA                   OR          #170,R0
    000000C2 205A                   XOR         R5,R0
          Keys.c   105          delay();
    000000C4 BFBB                   BSR         _delay
    000000C6 2E01                   MOV.W       R0,@R14
          Keys.c   106          *PORTB = 0xFF;
    000000C8 D31A                   MOV.L       L356+26,R3 ; H'A4000122
    000000CA E2FF                   MOV         #-1,R2
    000000CC 2320                   MOV.B       R2,@R3
          Keys.c   107          *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CE 60C0                   MOV.B       @R12,R0
    000000D0 C9F0                   AND         #240,R0
    000000D2 20AB                   OR          R10,R0
    000000D4              L355:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Sep-2020 20:54:48  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Keys.c   108       }
          Keys.c   109    
          Keys.c   110       delay();
    000000D4 BFB3                   BSR         _delay
    000000D6 2C00                   MOV.B       R0,@R12
          Keys.c   111       result = (~(*PORTA))>>column & 1;
    000000D8 D317                   MOV.L       L356+30,R3 ; H'A4000120
    000000DA 6030                   MOV.B       @R3,R0
    000000DC 62F0                   MOV.B       @R15,R2
    000000DE 6007                   NOT         R0,R0
    000000E0 622C                   EXTU.B      R2,R2
    000000E2 622B                   NEG         R2,R2
    000000E4 402C                   SHAD        R2,R0
    000000E6 C901                   AND         #1,R0
          Keys.c   112       delay();
    000000E8 BFA9                   BSR         _delay
    000000EA 2F00                   MOV.B       R0,@R15
          Keys.c   113       *PORTB_CTRL = 0xAAAA;
    000000EC 2B91                   MOV.W       R9,@R11
          Keys.c   114       *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EE 60E1                   MOV.W       @R14,R0
    000000F0 20D9                   AND         R13,R0
    000000F2 CBAA                   OR          #170,R0
          Keys.c   115       delay();
    000000F4 BFA3                   BSR         _delay
    000000F6 2E01                   MOV.W       R0,@R14
          Keys.c   116       *PORTB_CTRL = 0x5555;
    000000F8 9211                   MOV.W       L356+4,R2  ; H'5555
    000000FA 2B21                   MOV.W       R2,@R11
          Keys.c   117       *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000FC 60E1                   MOV.W       @R14,R0
    000000FE 20D9                   AND         R13,R0
    00000100 CB55                   OR          #85,R0
          Keys.c   118       delay();
    00000102 BF9C                   BSR         _delay
    00000104 2E01                   MOV.W       R0,@R14
          Keys.c   119    
          Keys.c   120       return result;
    00000106 60F0                   MOV.B       @R15,R0
          Keys.c   121    }
    00000108 7F04                   ADD         #4,R15
    0000010A 4F26                   LDS.L       @R15+,PR
    0000010C 69F6                   MOV.L       @R15+,R9
    0000010E 6AF6                   MOV.L       @R15+,R10
    00000110 6BF6                   MOV.L       @R15+,R11
    00000112 6CF6                   MOV.L       @R15+,R12
    00000114 6DF6                   MOV.L       @R15+,R13
    00000116 000B                   RTS
    00000118 6EF6                   MOV.L       @R15+,R14
    0000011A              L356:                             
    0000011A AAAA                   .DATA.W     H'AAAA
    0000011C FF00                   .DATA.W     H'FF00
    0000011E 5555                   .DATA.W     H'5555
    00000120 <00000000>             .DATA.L     _sc0015
    00000124 FF000000               .DATA.L     H'FF000000
    00000128 00FF0000               .DATA.L     H'00FF0000
    0000012C A4000102               .DATA.L     H'A4000102




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Sep-2020 20:54:48  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000130 A4000118               .DATA.L     H'A4000118
    00000134 A4000122               .DATA.L     H'A4000122
    00000138 A4000120               .DATA.L     H'A4000120
          Keys.c   122    
          Keys.c   123    unsigned char KeyDown(unsigned char keycode)
    0000013C              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    0000013C 2FE6                   MOV.L       R14,@-R15
    0000013E EE0A                   MOV         #10,R14
    00000140 2FD6                   MOV.L       R13,@-R15
    00000142 4F22                   STS.L       PR,@-R15
          Keys.c   124    {
          Keys.c   125       unsigned short key[8];
          Keys.c   126       const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000144 D330                   MOV.L       L357,R3    ; H'A44B0000
    00000146 7FE8                   ADD         #-24,R15
    00000148 2F40                   MOV.B       R4,@R15
    0000014A 1F31                   MOV.L       R3,@(4,R15)
    0000014C 6DF0                   MOV.B       @R15,R13
    0000014E BF57                   BSR         _OSVersionAsInt
    00000150 6DDC                   EXTU.B      R13,R13
    00000152 D22E                   MOV.L       L357+4,R2  ; H'02020000
    00000154 3023                   CMP/GE      R2,R0
    00000156 8B26                   BF          L346
          Keys.c   127       if(isOS2)
          Keys.c   128       {
          Keys.c   129          unsigned char row = keycode%10;
    00000158 D32D                   MOV.L       L357+8,R3  ; __modls
    0000015A 61D3                   MOV         R13,R1
    0000015C 430B                   JSR         @R3
    0000015E 60E3                   MOV         R14,R0
    00000160 2F00                   MOV.B       R0,@R15
          Keys.c   130          memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    00000162 E610                   MOV         #16,R6
    00000164 D32B                   MOV.L       L357+12,R3 ; _memcpy
    00000166 64F3                   MOV         R15,R4
    00000168 55F1                   MOV.L       @(4,R15),R5
    0000016A 430B                   JSR         @R3
    0000016C 7408                   ADD         #8,R4
          Keys.c   131    
          Keys.c   132          return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016E E501                   MOV         #1,R5
    00000170 64F0                   MOV.B       @R15,R4
    00000172 61D3                   MOV         R13,R1
    00000174 D228                   MOV.L       L357+16,R2 ; __divls
    00000176 644C                   EXTU.B      R4,R4
    00000178 6343                   MOV         R4,R3
    0000017A 2359                   AND         R5,R3
    0000017C 4308                   SHLL2       R3
    0000017E 4300                   SHLL        R3
    00000180 420B                   JSR         @R2
    00000182 60E3                   MOV         R14,R0
    00000184 330C                   ADD         R0,R3
    00000186 73FF                   ADD         #-1,R3
    00000188 6053                   MOV         R5,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Sep-2020 20:54:48  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000018A 403C                   SHAD        R3,R0
    0000018C 6343                   MOV         R4,R3
    0000018E 4321                   SHAR        R3
    00000190 4300                   SHLL        R3
    00000192 61F3                   MOV         R15,R1
    00000194 7108                   ADD         #8,R1
    00000196 331C                   ADD         R1,R3
    00000198 6231                   MOV.W       @R3,R2
    0000019A 622D                   EXTU.W      R2,R2
    0000019C 2029                   AND         R2,R0
    0000019E 2008                   TST         R0,R0
    000001A0 0029                   MOVT        R0
    000001A2 A00E                   BRA         L348
    000001A4 CA01                   XOR         #1,R0
    000001A6              L346:                             
          Keys.c   133       }
          Keys.c   134       else
          Keys.c   135       {
          Keys.c   136          return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A6 61D3                   MOV         R13,R1
    000001A8 D31B                   MOV.L       L357+16,R3 ; __divls
    000001AA 430B                   JSR         @R3
    000001AC 60E3                   MOV         R14,R0
    000001AE 6403                   MOV         R0,R4
    000001B0 D317                   MOV.L       L357+8,R3  ; __modls
    000001B2 61D3                   MOV         R13,R1
    000001B4 74FF                   ADD         #-1,R4
    000001B6 4408                   SHLL2       R4
    000001B8 4408                   SHLL2       R4
    000001BA 430B                   JSR         @R3
    000001BC 60E3                   MOV         R14,R0
    000001BE BF46                   BSR         _CheckKeyRow
    000001C0 340C                   ADD         R0,R4
          Keys.c   137       }
          Keys.c   138    }
    000001C2              L348:                             
    000001C2 7F18                   ADD         #24,R15
    000001C4 4F26                   LDS.L       @R15+,PR
    000001C6 6DF6                   MOV.L       @R15+,R13
    000001C8 000B                   RTS
    000001CA 6EF6                   MOV.L       @R15+,R14
          Keys.c   139    unsigned char GetKeyMod(unsigned int *key)
    000001CC              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20
    000001CC 2FE6                   MOV.L       R14,@-R15
    000001CE 2FD6                   MOV.L       R13,@-R15
    000001D0 2FC6                   MOV.L       R12,@-R15
    000001D2 4F22                   STS.L       PR,@-R15
          Keys.c   140    {
          Keys.c   141       unsigned char x, ret;
          Keys.c   142    
          Keys.c   143       ret = GetKey(key);
    000001D4 D311                   MOV.L       L357+20,R3 ; _GetKey
    000001D6 7FFC                   ADD         #-4,R15
    000001D8 430B                   JSR         @R3
    000001DA 6C43                   MOV         R4,R12
    000001DC 2F00                   MOV.B       R0,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Sep-2020 20:54:48  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          Keys.c   144    
          Keys.c   145       for(x = 0; x < 80; x++)
    000001DE EE00                   MOV         #0,R14
    000001E0 ED50                   MOV         #80,R13
    000001E2              L351:                             
          Keys.c   146       {
          Keys.c   147          if(KeyDown(x))
    000001E2 BFAB                   BSR         _KeyDown
    000001E4 64E3                   MOV         R14,R4
    000001E6 600C                   EXTU.B      R0,R0
    000001E8 2008                   TST         R0,R0
    000001EA 8902                   BT          L352
          Keys.c   148          {
          Keys.c   149             *key = x;
    000001EC 6EEC                   EXTU.B      R14,R14
          Keys.c   150             break;
    000001EE A004                   BRA         L350
    000001F0 2CE2                   MOV.L       R14,@R12
    000001F2              L352:                             
    000001F2 7E01                   ADD         #1,R14
    000001F4 62EC                   EXTU.B      R14,R2
    000001F6 32D3                   CMP/GE      R13,R2
    000001F8 8BF3                   BF          L351
    000001FA              L350:                             
          Keys.c   151          }
          Keys.c   152       }
          Keys.c   153       return ret;
    000001FA 60F0                   MOV.B       @R15,R0
          Keys.c   154    }
    000001FC 7F04                   ADD         #4,R15
    000001FE 4F26                   LDS.L       @R15+,PR
    00000200 6CF6                   MOV.L       @R15+,R12
    00000202 6DF6                   MOV.L       @R15+,R13
    00000204 000B                   RTS
    00000206 6EF6                   MOV.L       @R15+,R14
    00000208              L357:                             
    00000208 A44B0000               .DATA.L     H'A44B0000
    0000020C 02020000               .DATA.L     H'02020000
    00000210 <00000000>             .DATA.L     __modls
    00000214 <00000000>             .DATA.L     _memcpy
    00000218 <00000000>             .DATA.L     __divls
    0000021C <00000000>             .DATA.L     _GetKey
          Keys.c   155    // #define IsKeyDown(x) KeyDown(x)
          Keys.c   156    // #define IsKeyUp(x) !KeyDown(x)
          Keys.c   157    // #define GetKey(x) GetKeyMod(x)
          Keys.c   158    #endif
          Keys.c   159    #endif
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           









SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 13-Sep-2020 20:54:48  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         4




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      157



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000220 Byte(s)
CONSTANT SECTION (C):                               00000010 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000230 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            4
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           6
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            22






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ludor\AppData\Local\Temp\hmkE11C.tmp 

